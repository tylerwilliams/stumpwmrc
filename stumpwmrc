;;-*-lisp-*-
(in-package :stumpwm)

(setf stumpwm::*debug-level* 10)
(setf *startup-message* nil)
(setf *startup-message* "welcome to stumpwm!")

;;Window border colors
(setf *focus-color* "green")
(setf *unfocus-color* "black")
(setf *window-border-style* :thick)

(setf *message-window-gravity* :bottom-right)
(setf *input-window-gravity* :bottom-right)

(set-bg-color "black")
(set-fg-color "green")
(set-border-color "green")

(setf *frame-number-map* "1234567890")

(set-font "-lispm-fixed-medium-r-normal-*-10-*-*-*-*-*-*-*")

(setf *mode-line-border-width* 0)
(setf *mode-line-pad-x* 6)
(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "green")
(setf *mode-line-border-color* "green")
(setf *mode-line-position* :bottom)
(setf *mode-line-frame-position* :bottom)

;; turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))


(defun cat (&rest strings)
  "Concatenates strings, like the Unix command 'cat'. A shortcut for (concatenate 'string foo bar)."
  (apply 'concatenate 'string strings))

(defun shell-command (command)
  (check-type command string)
  (echo-string (current-screen) (stumpwm::run-shell-command command t)))

(defcommand my-shell-command (command) ((:string "sh$ "))
  (check-type command string)
  (shell-command command))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(defun fix-str-length (str length)
  (if (> (length str) length)
      (cat (subseq str 0 (- length 2)) ".*")
    (format nil "~va" length str)))

(defun current-window-tilte ()
  (let ((current-window (current-window)))
    (if current-window
        (window-title current-window)
      (cat "No Window In ::"
	   (group-name (current-group)) "::"))))


(defun window-tilte-and-notifications-with-fix-length (length notifications-length)
  (if (< length notifications-length)
      (error "length should bigger than notifications-length!"))
  (if notifications
      (cat (fix-str-length (current-window-tilte) (- length
                                                     notifications-length
                                                     3))
           " ["
           (fix-str-length  (format nil "~{ ~a~#[~:;;~]~}" notifications)  notifications-length)
           "]")
    (fix-str-length (current-window-tilte) length)))

;;; Display the keysequence in progress
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :bottom-right))
      (message "Key sequence: ~A" (print-key-seq (reverse key-seq))))
    (when (stringp cmd)
      ;; Give 'em time to read it.
      (sleep 0.1))))

;;(replace-hook *key-press-hook* 'key-press-hook)


;;(load-module "cpu")
;;(setq *cpu-usage-bar-width* 12)

;;(defun fmt-cpu-usage (ml)
;;  "Returns a string representing current the percent of average CPU
;;  utilization."
;;  (declare (ignore ml))
;;  (let ((cpu (truncate (* 100 (current-cpu-usage)))))
;;    (format nil "CPU:^[~A~3D%^] " (bar-zone-color cpu) cpu)))

;;(setf *screen-mode-line-format*                                                
;;      (list 


(setf *screen-mode-line-format* (list  "^5*"
                                       `(:eval (window-tilte-and-notifications-with-fix-length 56 20))
                                       ;;"%N" ;notifications
                                       "^n"
                                       "^6*%w ^n"
;;                                       " %c " ; cpu
				       " ^2*"
                                       '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t))
      "^n"))



;; use alt+F[1-12] to get around groups
(dotimes (i 13)
  (unless (eq i 0) ; F0 is non-existant and will error. 
    (define-key *top-map* (kbd (format nil "M-F~a" i)) (format nil "gselect ~a" i))))

;; setup some time saving shortcuts
(defcommand chrome () ()
  (run-or-raise "google-chrome" '(:class "chrome")))

(define-key *root-map* (kbd "w") "chrome")

(defcommand spotify () ()
  (run-or-raise "spotify" '(:class "spotify")))

(define-key *root-map* (kbd "m") "spotify")

(defcommand gnome-terminal () ()
  (run-or-raise "gnome-terminal" '(:class "gnome-terminal")))

(define-key *root-map* (kbd "C") "gnome-terminal")

(defcommand run-top () ()
  (stumpwm::my-shell-command "top -b -n 1 -c -d 1"))

(define-key *root-map* (kbd "&") "run-top")

(defparameter X-TERM (cat "exec aterm -fn "
			  "'-lispm-fixed-medium-r-normal-*-12-*-*-*-*-*-*-*' "
			  "-sh 65 -tr -trsb -cr yellow -pr green -bl +vb -ut "
			  "+sr -sl 1000 +rv -fade 5 -fg white -bgtype scale "
			  "-txttype true -bd black +sb -tint white"))

(define-key *root-map* (kbd "c") (cat X-TERM " "))

;;startup commands
(setf (group-name (first (screen-groups (current-screen)))) "Browse")
(stumpwm::run-commands "gnewbg Code"
		       "gnewbg Other")

;; Define the background window
(defvar *background-image-path* "/home/tylerw/backgrounds/")
(defun select-random-background-image ()
  "Select a random image"
  (let ((file-list (directory (concatenate 'string *background-image-path* "*.png")))
        (*random-state* (make-random-state t)))
    (namestring (nth (random (length file-list)) file-list))))

(run-shell-command (concatenate 'string "Esetroot -center " (select-random-background-image)))


(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

